1. Commands:
  1.0. keyper:
    ✔ Returns the tree-structure of your ecretKeyper directory (i.e., all passwords you currently have) @done (18/08/2023, 23:28:45)
  1.1: keyper list:
    ✔ Returns all the commands available in the app @done (19/08/2023, 10:10:31)

  1.2. keyper init: 
    ✔ Create a directory named `.secretKeyper` in the home directory @done (15/08/2023, 22:31:18)

  1.3. keyper insert <website>:
  ✔ ask for directory input from user @done (18/08/2023, 10:29:30)
  ✔ ask for pw twice - proceed only if the pw entered both times matches - maybe create a boolean: utils/validatePassword.js @done (18/08/2023, 11:57:30)
  ✔ redirect to `keyper edit <website>/password.txt` if the user tries to overwrite an already existing password file @done (18/08/2023, 10:29:33)
  ✔ create a sub-category and file as (name of site) @done (18/08/2023, 14:50:51)

    ***** x - x - x - x - ******

    During GPG encryption, change the type of file from "password.txt" to "password.gpg" to store the file in an encrypted format
      ☐ encrypt the input password in some encryption format then store it in that file
    
    ***** x - x - x - x - ******

    1.3.1. keyper insert <website>/<filename>:
      ✔ Create nested files and folders @done (18/08/2023, 14:50:44)
        - Example of nested files: `keyper insert instagram/personal`, `keyper insert instagram/work`
    
  1.4. keyper extract <website>:
  ✔ look for the file in sub-categories and open the file matching the website  and copy it to clipboard @done (19/08/2023, 22:53:04)
      ☐ ADD TAB-completion for the dir-names
      ☐ Fix clipboard-thing
        - https://stackoverflow.com/questions/17178617/how-to-use-the-clipboard-in-go
        - https://github.com/mattn/go-gtk/blob/master/_example/clipboard/clipboard.go

      ☐ Decrypt the password??
  ☐ (optional) ask for host password for extra security
  ✔ (optional) clears the clipboard after a specific time (30 - 45 seconds) @done (19/08/2023, 22:53:21)

  1.5. keyper remove <website>:
  ✔ look for the file named by <website> then delete it @done (19/08/2023, 23:29:01)

  1.7. keyper update <website>:
   ✔ look for the file named by <website> @done (21/08/2023, 10:47:13)
   ✔ ask for old password (for verification) @done (21/08/2023, 10:56:26)
   ✔ check if both passwords are same @done (21/08/2023, 10:56:28)
   ✔ if both are same then ask for new password input @done (21/08/2023, 10:56:29)
   ✔ remove the password string from file @done (21/08/2023, 10:56:32)
   ✔ update that string with newly password @done (21/08/2023, 10:56:41)

  1.7. keyper generate <website>: 
    - (can add additional details like ask user if they want numbers and special characters in their password, blah blah)
   ✔ generate a random password and store it to file of <website> @done (21/08/2023, 12:37:28)
   ☐ once password is generated, print the decrypted password once 
   ✔ copy the password to clipboard and print that as a message @done (21/08/2023, 12:37:21)
   ✔ automatically insert that password to the file @done (21/08/2023, 12:42:21)

  1.8. keyper find <string>:
   ✔ Searches for all passwords given a string @done (21/08/2023, 12:49:07)
      - Example: `keyper find instagram` should return a tree structure for all passwords related to instagram

2. GnuPG:
  2.1. keyper init GPG_KEY_ID:
   ☐ Add a feature to generate a GPG key and store it in a file (also remotely, in the db)
   ☐ Should downloading this app automatically generate a GPG key for the user?
      - Or let them create a new key-pair using `gpg --gen-key`? 
   ☐ Change the <keyper init> command from <keyper init [wesbite]> to <keyper init [GPG_Key_ID]>

  2.1. keyper git init:
   ☐ Initialises your secretkeyper-directory as a git repository
  
3. ProgressBar:
  ☐ Add a progress bar for all commands that take time to execute?

4. Link API to CLI:
  ☐ Add a feature to link the CLI to the API
  ☐ Add a feature to link the CLI to the DB